{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","date","Date","photo","getNewDate","dd","getDate","mm","getMonth","yy","getFullYear","FetchPhotoFromApi","fetch","then","response","json","photoData","setState","localStorage","getItem","this","console","log","onChange","value","clear","setItem","format","clearIcon","title","media_type","src","url","alt","className","frameBorder","gesture","allow","allowFullScreen","explanation","Component","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"ySAiGeA,E,4MA5FXC,MAAQ,CACJC,KAAM,IAAIC,KACVC,MAAO,I,EAGXC,WAAa,SAACH,GACV,IAAII,EAAKJ,EAAKK,UACVD,EAAK,KAAIA,EAAK,IAAMA,GAExB,IAAIE,EAAKN,EAAKO,WAAa,EACvBD,EAAK,KAAIA,EAAK,IAAMA,GAExB,IAAIE,EAAKR,EAAKS,cAGd,OAFID,EAAK,KAAIA,EAAK,IAAMA,GAElB,GAAN,OAAUA,EAAV,YAAgBF,EAAhB,YAAsBF,I,EAG1BM,kBAAoB,SAAAV,GAEhBW,MAAM,4CAAD,OAA6CX,EAA7C,oBADU,6CAEVY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAI,EAAKC,SAAS,CAAEd,MAAOa,Q,mEAK9CE,aAAaC,QAAQ,SAAWC,KAAKH,SAAS,CAC1ChB,KAAO,IAAIC,KAAKgB,aAAaC,QAAQ,a,0CAKrCD,aAAaC,QAAQ,SAIrBC,KAAKT,kBAAkBS,KAAKhB,WAAW,IAAIF,KAAKgB,aAAaC,QAAQ,WACrEE,QAAQC,IAAI,kBAJZF,KAAKT,kBAAkBS,KAAKhB,WAAWgB,KAAKpB,MAAMC,OAClDoB,QAAQC,IAAI,U,+BAOV,IAAD,OACL,OACI,6BACI,mEAEA,kBAAC,IAAD,CACIC,SAAU,SAACC,GACP,EAAKb,kBAAkB,EAAKP,WAAWoB,IAEvC,EAAKP,SAAS,CACVhB,KAAMuB,IAEN,EAAKpB,WAAWoB,KAAW,EAAKpB,WAAW,IAAIF,MAC/CgB,aAAaO,QAEbP,aAAaQ,QAAQ,OAAQF,IAGrCA,MAAOJ,KAAKpB,MAAMC,KAClB0B,OAAQ,UACRC,UAAW,OAGf,6BACI,4BAAKR,KAAKpB,MAAMG,MAAM0B,OACW,UAAhCT,KAAKpB,MAAMG,MAAM2B,WACd,yBACIC,IAAKX,KAAKpB,MAAMG,MAAM6B,IACtBC,IAAKb,KAAKpB,MAAMG,MAAM0B,MACtBK,UAAU,UAGd,4BACIL,MAAM,cACNE,IAAKX,KAAKpB,MAAMG,MAAM6B,IACtBG,YAAY,IACZC,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACfJ,UAAU,UAGlB,2BAAId,KAAKpB,MAAMG,MAAMoC,mB,GArFtBC,a,MCCJ,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,OACb,kBAAC,IAAD,CAAOQ,UAAW3C,EAAM4C,KAAK,QCGjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.f4d4185c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport DatePicker from \"react-date-picker\";\r\n\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        date: new Date(),\r\n        photo: {}\r\n    };\r\n\r\n    getNewDate = (date) => {\r\n        let dd = date.getDate();\r\n        if (dd < 10) dd = '0' + dd;\r\n\r\n        let mm = date.getMonth() + 1;\r\n        if (mm < 10) mm = '0' + mm;\r\n\r\n        let yy = date.getFullYear();\r\n        if (yy < 10) yy = '0' + yy;\r\n\r\n        return `${yy}-${mm}-${dd}`;\r\n    }\r\n\r\n    FetchPhotoFromApi = date => {\r\n        const apiKey = 'CJfS9Qqeg3R3Mm4JzMxbnOJTO26ndK2Fmel0D6o1'\r\n        fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=${apiKey}`)\r\n            .then(response => response.json())\r\n            .then(photoData => this.setState({ photo: photoData }));\r\n\r\n    };\r\n\r\n    componentWillMount() {\r\n        localStorage.getItem('date') && this.setState({\r\n            date:  new Date(localStorage.getItem('date')),\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!localStorage.getItem('date')){\r\n            this.FetchPhotoFromApi(this.getNewDate(this.state.date))\r\n            console.log('new')\r\n        } else {\r\n            this.FetchPhotoFromApi(this.getNewDate(new Date(localStorage.getItem('date')))) // get\r\n            console.log('localStorage')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>NASA's Astronomy Picture of the Day</h1>\r\n\r\n                <DatePicker\r\n                    onChange={(value) => {\r\n                        this.FetchPhotoFromApi(this.getNewDate(value))\r\n\r\n                        this.setState({\r\n                            date: value\r\n                        })\r\n                        if (this.getNewDate(value) === this.getNewDate(new Date())) {\r\n                            localStorage.clear()\r\n                        } else {\r\n                            localStorage.setItem('date', value)\r\n                        }\r\n                    }}\r\n                    value={this.state.date}\r\n                    format={\"y-MM-dd\"}\r\n                    clearIcon={null}\r\n                />\r\n\r\n                <div>\r\n                    <h3>{this.state.photo.title}</h3>\r\n                    {this.state.photo.media_type === \"image\" ? (\r\n                        <img\r\n                            src={this.state.photo.url}\r\n                            alt={this.state.photo.title}\r\n                            className=\"photo\"\r\n                        />\r\n                    ) : (\r\n                        <iframe\r\n                            title=\"space-video\"\r\n                            src={this.state.photo.url}\r\n                            frameBorder=\"0\"\r\n                            gesture=\"media\"\r\n                            allow=\"encrypted-media\"\r\n                            allowFullScreen\r\n                            className=\"photo\"\r\n                        />\r\n                    )}\r\n                    <p>{this.state.photo.explanation}</p>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Main from \"./components/Main\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <Route component={Main} path=\"/\" />\n      </div>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}